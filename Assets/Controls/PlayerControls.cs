//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerInput"",
            ""id"": ""f6e3b7b7-054c-4634-9919-ed7b2711befd"",
            ""actions"": [
                {
                    ""name"": ""DestroyPierre"",
                    ""type"": ""Button"",
                    ""id"": ""68beac38-afff-4688-9663-521e37207f0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DestroyFeuille"",
                    ""type"": ""Button"",
                    ""id"": ""3e040284-8990-414d-9c61-3ec1894e48af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DestroyCiseau"",
                    ""type"": ""Button"",
                    ""id"": ""b3578d73-2659-425c-923c-6460eb91ad91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0029a6e6-2f9a-4d54-99e0-98cfc24bc361"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DestroyPierre"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""010149a7-3152-48ae-bc35-03dc60e8a342"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DestroyFeuille"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e12149d-2f07-407d-b903-4568596c5a57"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DestroyCiseau"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInput
        m_PlayerInput = asset.FindActionMap("PlayerInput", throwIfNotFound: true);
        m_PlayerInput_DestroyPierre = m_PlayerInput.FindAction("DestroyPierre", throwIfNotFound: true);
        m_PlayerInput_DestroyFeuille = m_PlayerInput.FindAction("DestroyFeuille", throwIfNotFound: true);
        m_PlayerInput_DestroyCiseau = m_PlayerInput.FindAction("DestroyCiseau", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInput
    private readonly InputActionMap m_PlayerInput;
    private List<IPlayerInputActions> m_PlayerInputActionsCallbackInterfaces = new List<IPlayerInputActions>();
    private readonly InputAction m_PlayerInput_DestroyPierre;
    private readonly InputAction m_PlayerInput_DestroyFeuille;
    private readonly InputAction m_PlayerInput_DestroyCiseau;
    public struct PlayerInputActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerInputActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DestroyPierre => m_Wrapper.m_PlayerInput_DestroyPierre;
        public InputAction @DestroyFeuille => m_Wrapper.m_PlayerInput_DestroyFeuille;
        public InputAction @DestroyCiseau => m_Wrapper.m_PlayerInput_DestroyCiseau;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Add(instance);
            @DestroyPierre.started += instance.OnDestroyPierre;
            @DestroyPierre.performed += instance.OnDestroyPierre;
            @DestroyPierre.canceled += instance.OnDestroyPierre;
            @DestroyFeuille.started += instance.OnDestroyFeuille;
            @DestroyFeuille.performed += instance.OnDestroyFeuille;
            @DestroyFeuille.canceled += instance.OnDestroyFeuille;
            @DestroyCiseau.started += instance.OnDestroyCiseau;
            @DestroyCiseau.performed += instance.OnDestroyCiseau;
            @DestroyCiseau.canceled += instance.OnDestroyCiseau;
        }

        private void UnregisterCallbacks(IPlayerInputActions instance)
        {
            @DestroyPierre.started -= instance.OnDestroyPierre;
            @DestroyPierre.performed -= instance.OnDestroyPierre;
            @DestroyPierre.canceled -= instance.OnDestroyPierre;
            @DestroyFeuille.started -= instance.OnDestroyFeuille;
            @DestroyFeuille.performed -= instance.OnDestroyFeuille;
            @DestroyFeuille.canceled -= instance.OnDestroyFeuille;
            @DestroyCiseau.started -= instance.OnDestroyCiseau;
            @DestroyCiseau.performed -= instance.OnDestroyCiseau;
            @DestroyCiseau.canceled -= instance.OnDestroyCiseau;
        }

        public void RemoveCallbacks(IPlayerInputActions instance)
        {
            if (m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputActions @PlayerInput => new PlayerInputActions(this);
    public interface IPlayerInputActions
    {
        void OnDestroyPierre(InputAction.CallbackContext context);
        void OnDestroyFeuille(InputAction.CallbackContext context);
        void OnDestroyCiseau(InputAction.CallbackContext context);
    }
}
